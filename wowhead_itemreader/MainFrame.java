/*
 * Copyright (C) 2011 Thedeath<www.fseek.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * MainFrame.java
 *
 * Created on 02.08.2011, 16:51:41
 */
package wowhead_itemreader;

import config.ConfigHandler;
import java.awt.Desktop;
import java.awt.MediaTracker;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;

/**
 *
 * @author Simon Wimmesberger<www.fseek.org>
 */
public class MainFrame extends javax.swing.JFrame
{
    private SearchThread t;
    private ArrayList<WoWHeadData> items = null;
    
    public static File mainDir = getMainPath();
    
    
    private String wowHeadLinkText = null;
    
    private ConfigHandler configHandler;
    /** Creates new form MainFrame */
    public MainFrame()
    {
        initComponents();
        configHandler = new ConfigHandler();
        try
        {
            configHandler.loadConfig();
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Config file cant be read !");
        }
        itemIdLabel.setVisible(true);
        itemIdField.setVisible(true);
        fromLabel.setVisible(false);
        toLabel.setVisible(false);
        fromField.setVisible(false);
        toField.setVisible(false);
        progressBar.setVisible(false);
        //setCss();
        multiLayout(false);
        addedInBox.setEnabled(false);
        setWoWHeadLink(null);
        intListener();
        this.pack();
        setLocationRelativeTo(null);
    }
    
    private void intListener()
    {
        queryPane.getDocument().addDocumentListener(new DocumentListener() 
        {
            public void insertUpdate(DocumentEvent e)
            {
                checkText();
            }

            public void removeUpdate(DocumentEvent e)
            {
                checkText();
            }

            public void changedUpdate(DocumentEvent e)
            {
                checkText();
            }
        });
    }
    
    private void checkText()
    {
        if(queryPane.getText().isEmpty())
        {
            saveToFileButton.setEnabled(false);
            seperateFileCheckbox.setEnabled(false);
        }
        else
        {
            saveToFileButton.setEnabled(true);
            seperateFileCheckbox.setEnabled(true);
        }
    }
    
    private void setCss()
    {
        HTMLEditorKit editorKit = (HTMLEditorKit)this.editorPane.getEditorKit();
        StyleSheet styleSheet = editorKit.getStyleSheet();
        URL resource = getClass().getResource("/wowhead_itemreader/resources/tooltip.png");
        styleSheet.importStyleSheet(resource);
        editorKit.setStyleSheet(styleSheet);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoLabel = new javax.swing.JLabel();
        titlePanel = new javax.swing.JLabel();
        sourceLabel = new javax.swing.JLabel();
        homepageLabel = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        scrollPanel = new javax.swing.JScrollPane();
        editorPane = new GrafikEditorPane(new javax.swing.ImageIcon(getClass().getResource("/wowhead_itemreader/resources/tooltip.png")));
        jPanel1 = new GrafikPanel(new javax.swing.ImageIcon(getClass().getResource("/wowhead_itemreader/resources/default.png")));
        picture = new javax.swing.JLabel();
        wowHeadLink = new javax.swing.JLabel();
        viewIn3DButton = new javax.swing.JButton();
        leftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryPane = new javax.swing.JEditorPane();
        itemIdLabel = new javax.swing.JLabel();
        itemIdField = new javax.swing.JTextField();
        multiCheckBox = new javax.swing.JCheckBox();
        fromLabel = new javax.swing.JLabel();
        fromField = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        deepCheckBox = new javax.swing.JCheckBox();
        coreComboBox = new javax.swing.JComboBox();
        addedInBox = new javax.swing.JComboBox();
        saveToFileButton = new javax.swing.JButton();
        seperateFileCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WoWHead Item parser");

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wowhead_itemreader/resources/home.png"))); // NOI18N

        titlePanel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titlePanel.setText("WOWHead ItemReader:");

        sourceLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        sourceLabel.setText("Source:");

        homepageLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        homepageLabel.setForeground(new java.awt.Color(0, 51, 204));
        homepageLabel.setText("www.wowhead.com");

        rightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Info"));

        nameField.setEditable(false);

        idField.setEditable(false);

        editorPane.setContentType("text/html");
        editorPane.setEditable(false);
        editorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        editorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                editorPaneHyperlinkUpdate(evt);
            }
        });
        scrollPanel.setViewportView(editorPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picture, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picture, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addContainerGap())
        );

        wowHeadLink.setForeground(new java.awt.Color(0, 51, 204));
        wowHeadLink.setText("<html><u>test</u></html>");
        wowHeadLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        wowHeadLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wowHeadLinkMouseClicked(evt);
            }
        });

        viewIn3DButton.setText("View in 3D");
        viewIn3DButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewIn3DButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idField, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addGroup(rightPanelLayout.createSequentialGroup()
                                .addComponent(wowHeadLink, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewIn3DButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wowHeadLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewIn3DButton)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanel)
                .addContainerGap())
        );

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Creation"));

        jScrollPane1.setViewportView(queryPane);

        itemIdLabel.setText("Item id:");

        multiCheckBox.setText("Multi item");
        multiCheckBox.setToolTipText("Parse a item range from x to x.");
        multiCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                multiCheckBoxItemStateChanged(evt);
            }
        });
        multiCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiCheckBoxActionPerformed(evt);
            }
        });

        fromLabel.setText("From:");

        toLabel.setText("to");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        deepCheckBox.setText("Deep");
        deepCheckBox.setToolTipText("Scans also the main html page to get more information about the item but it will take a bit longer to scan it.");
        deepCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deepCheckBoxItemStateChanged(evt);
            }
        });

        coreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ArcEmu", "Mangos", "Trinity", "Skyfire" }));

        addedInBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NONE", "Added in patch 4.2.0", "Added in patch 4.1.0", "Added in patch 3.3.5", "No Cataclysm" }));

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(itemIdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(coreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(fromLabel)
                                .addGap(18, 18, 18)
                                .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toField)))
                        .addGap(18, 18, 18)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(multiCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deepCheckBox))
                            .addComponent(addedInBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(startButton)
                        .addGap(38, 38, 38)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemIdLabel)
                    .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiCheckBox)
                    .addComponent(deepCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromLabel)
                    .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(addedInBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addContainerGap())
        );

        saveToFileButton.setText("Save to file");
        saveToFileButton.setEnabled(false);
        saveToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileButtonActionPerformed(evt);
            }
        });

        seperateFileCheckbox.setText("Seperate files");
        seperateFileCheckbox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sourceLabel)
                        .addGap(6, 6, 6)
                        .addComponent(homepageLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveToFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seperateFileCheckbox))
                            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                .addComponent(logoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                            .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(titlePanel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveToFileButton)
                            .addComponent(seperateFileCheckbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceLabel)
                            .addComponent(homepageLabel)))
                    .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void multiCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_multiCheckBoxActionPerformed
    {//GEN-HEADEREND:event_multiCheckBoxActionPerformed
        if(multiCheckBox.isSelected())
        {
            itemIdLabel.setVisible(false);
            itemIdField.setVisible(false);
            fromLabel.setVisible(true);
            toLabel.setVisible(true);
            fromField.setVisible(true);
            toField.setVisible(true);
            progressBar.setVisible(true);
        }
        else
        {
            itemIdLabel.setVisible(true);
            itemIdField.setVisible(true);
            fromLabel.setVisible(false);
            toLabel.setVisible(false);
            fromField.setVisible(false);
            toField.setVisible(false);
            progressBar.setVisible(false);
        }
        this.pack();
}//GEN-LAST:event_multiCheckBoxActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
        startSearch();
}//GEN-LAST:event_startButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        stopSearch();
}//GEN-LAST:event_jButton1ActionPerformed

    private void editorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)//GEN-FIRST:event_editorPaneHyperlinkUpdate
    {//GEN-HEADEREND:event_editorPaneHyperlinkUpdate
        if(evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
        {
            try
            {
                try
                {
                    Desktop.getDesktop().browse(evt.getURL().toURI());
                } catch (URISyntaxException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex)
            {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_editorPaneHyperlinkUpdate

    private void deepCheckBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_deepCheckBoxItemStateChanged
    {//GEN-HEADEREND:event_deepCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            addedInBox.setEnabled(true);
        }
        else
        {
            addedInBox.setEnabled(false);
        }
    }//GEN-LAST:event_deepCheckBoxItemStateChanged

    private void multiCheckBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_multiCheckBoxItemStateChanged
    {//GEN-HEADEREND:event_multiCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            multiLayout(true);
        }
        else
        {
            multiLayout(false);
        }
    }//GEN-LAST:event_multiCheckBoxItemStateChanged

    private void wowHeadLinkMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_wowHeadLinkMouseClicked
    {//GEN-HEADEREND:event_wowHeadLinkMouseClicked
        if(wowHeadLinkText == null)return;
        try
        {
            Desktop.getDesktop().browse(new URI(wowHeadLinkText));
        } 
        catch (URISyntaxException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_wowHeadLinkMouseClicked

    private void saveToFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveToFileButtonActionPerformed
    {//GEN-HEADEREND:event_saveToFileButtonActionPerformed
        boolean flag = false;
        do
        {
            flag = false;
            JFileChooser chooser = new JFileChooser(new File("."));
            if(seperateFileCheckbox.isSelected())
            {
                manipulateChooserDirectory(chooser);
            }
            int showSaveDialog = chooser.showSaveDialog(this);
            if(showSaveDialog == JFileChooser.APPROVE_OPTION)
            {
                File selectedFile = chooser.getSelectedFile();
                if(selectedFile.exists() && seperateFileCheckbox.isSelected() == false)
                {
                    int n = JOptionPane.showOptionDialog(this,
                        "Do you want to overwrite that file ?",
                        "File exists",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,     //do not use a custom Icon
                        null,  //the titles of buttons
                        null); //default button title
                    if(n == JOptionPane.OK_OPTION)
                    {
                        flag = writeSqlFile(selectedFile);
                        break;
                    }
                }
                else
                {
                    flag = writeSqlFile(selectedFile);
                    break;
                }
            }
            return;
        }while(true);
        if(flag == true)
        {
            JOptionPane.showMessageDialog(this, "Saved succesfully !");
        }
    }//GEN-LAST:event_saveToFileButtonActionPerformed

    private void viewIn3DButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewIn3DButtonActionPerformed
    {//GEN-HEADEREND:event_viewIn3DButtonActionPerformed
        if(items == null || items.isEmpty())
        {
            return;
        }
        WoWHeadData get = items.get(items.size()-1);
    }//GEN-LAST:event_viewIn3DButtonActionPerformed

    private void manipulateChooserDirectory(JFileChooser chooser)
    {
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
    }
    
    private boolean writeSqlFile(File f)
    {
        if(!f.getName().endsWith(".sql") && f.isDirectory() == false)
        {
            f = new File(f.getAbsolutePath() + ".sql");
        }
        PrintWriter pw = null;
        try
        {
            if(f.isDirectory())
            {
                for(WoWHeadData s : items)
                {
                    File temp = new File(f.getAbsolutePath() + File.separator + s.itemId + ".sql");
                    pw = new PrintWriter(temp);
                    String createSql = s.createSql(this.getCore());
                    pw.print(createSql);
                    pw.flush();
                }
            }
            else
            {
                pw = new PrintWriter(f);
                for(WoWHeadData s : items)
                {
                    pw.println(s.createSql(this.getCore()));
                }
            }
            pw.flush();
            return true;
        } catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            if(pw != null)
            {
                pw.close();
            }
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                try
                {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                new MainFrame().setVisible(true);
            }
        });
    }
    
    public void startSearch()
    {
        getInfo();
    }

    public void stopSearch()
    {
        if(t != null)
        {
            t.stop();
            t = null;
        }
    }
    
    public void showPicture(String url, JLabel picture)
    {
        try
        {
            ImageIcon i = null;
            URL ImgURL = new URL(url);
            //JOptionPane.showMessageDialog(null, ImgURL);
            i = new ImageIcon(ImgURL);
            while ( i.getImageLoadStatus() == MediaTracker.LOADING );
            i.setImageObserver(picture);
            picture.setIcon(i);
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
    
    public void multiLayout(boolean bol)
    {
        if(bol == true)
        {
        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addComponent(fromLabel)
                        .addGap(18, 18, 18)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(coreComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fromField, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(multiCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deepCheckBox))
                            .addComponent(addedInBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(startButton)
                        .addGap(38, 38, 38)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deepCheckBox)
                    .addComponent(fromLabel)
                    .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addedInBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addContainerGap())
        );
        }
        else
        {
       javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addedInBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, leftPanelLayout.createSequentialGroup()
                                .addComponent(itemIdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(multiCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deepCheckBox))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(startButton)
                        .addGap(38, 38, 38)
                        .addComponent(jButton1))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemIdLabel)
                    .addComponent(itemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiCheckBox)
                    .addComponent(deepCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addedInBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addContainerGap())
        );
        }
    }
    
     private void startSearchTask(int itemId, int fromId, int toId)
    {
        if(t == null)
        {
            t = new SearchThread(itemId, fromId, toId, this, this.addedInBox.getSelectedIndex(), this.configHandler.getWowheadUrl());
            t.start();
        }
        else
        {
            System.out.println("Programm already running !");
        }
    }

    public void threadFinished()
    {
        items = this.t.getQuerys();
        this.t = null;
    }

    private void getInfo()
    {
        if(multiCheckBox.isSelected())
        {
            try
            {
                int fromid = Integer.parseInt(fromField.getText());
                int toId = Integer.parseInt(toField.getText());
                progressBar.setMaximum(toId - fromid);
                progressBar.setValue(0);
                progressBar.setStringPainted(true);
                if(toId <= fromid)
                {
                    JOptionPane.showMessageDialog(this, "ToId must be bigger than fromId!");
                }
                else
                {
                    startSearchTask(0, fromid, toId);
                }
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this,"From Id and To Id must be a Number!");
                }
        }
        else
        {
            try
            {
                int itemid = Integer.parseInt(itemIdField.getText());
                startSearchTask(itemid, 0, 0);
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,"Item Id must be a Number!");
            }
        }
    }
    
    private static File getMainPath()
    {
        return Util.cleanMainPath();
    }
    
    public int getCore()
    {
        int selectedIndex = coreComboBox.getSelectedIndex();
        return selectedIndex;
    }
    
    public void setWoWHeadLink(String text)
    {
        if(text == null)
        {
            this.wowHeadLink.setText("");
            this.wowHeadLink.setVisible(false);
        }
        else
        {
            this.wowHeadLink.setText("<html><u>"+text+"</u></html>");
            this.wowHeadLink.setVisible(true);
        }
        wowHeadLinkText = text;
    }
    
    public String getWoWHeadLink()
    {
        return this.wowHeadLinkText;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox addedInBox;
    private javax.swing.JComboBox coreComboBox;
    public javax.swing.JCheckBox deepCheckBox;
    public javax.swing.JEditorPane editorPane;
    private javax.swing.JTextField fromField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel homepageLabel;
    public javax.swing.JTextField idField;
    private javax.swing.JTextField itemIdField;
    private javax.swing.JLabel itemIdLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel logoLabel;
    public javax.swing.JCheckBox multiCheckBox;
    public javax.swing.JTextField nameField;
    public javax.swing.JLabel picture;
    public javax.swing.JProgressBar progressBar;
    public javax.swing.JEditorPane queryPane;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton saveToFileButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JCheckBox seperateFileCheckbox;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel titlePanel;
    private javax.swing.JTextField toField;
    private javax.swing.JLabel toLabel;
    public javax.swing.JButton viewIn3DButton;
    private javax.swing.JLabel wowHeadLink;
    // End of variables declaration//GEN-END:variables
}
